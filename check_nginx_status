#!/usr/bin/python
#
# this plugin is inspired by yangzi2008@126.com 
# http://exchange.nagios.org/directory/Plugins/Web-Servers/nginx/check_nginx/details
# 
# reimplemented by dogtown with more features
# 
# (c) copyright 2012,2013 dogtown@mare-system.de
# 
# License: GPL v2 
#
# dload: https://bitbucket.org/maresystem/dogtown-nagios-plugins/src
#

import string
import urllib2
import getopt
import sys
import time

version = "0.2.24 - testing - 2013-06-26"

### default_values

url = "/nginx_status"
host = "localhost"
port = 80

def usage():
   print """

check_nginx_status is a Nagios-Plugin 
to monitor nginx status and alerts on various values to test for

   Usage:

   check_nginx_status [-H|--HOST][-p|--port][-u|--url][-a|--auth][-s|--ssl]
                      [-t|--test][-w|--warning][-c|--critical]
                      [-h|--help][-v|--version][-d|--debug]

   Options:
          --help|-h)
            print check_nginx_status help
            
          --HOST|-H)
            Sets nginx host
            Default: localhost
          
          --port|-p)
            Sets connection-port 
            Default: 80/http, 443/https
          
          --ssl|-s)
            Turns on SSL
            Default: off
          
          --url|-u)
            Sets nginx status url path. 
            Default: /nginx_status
          
          --auth|-a)
            Sets nginx status BasicAuth user:password. 
            Default: off
            ***
          
          --test|-t)
            Sets the test(check)_value for w/c
            if used, -w/-c is mandatory
            Default: checktime
            possible Values:

                active_conn     -> active connections
                accepts_err     -> difference between accepted and 
                                   handled requests (should be 0)
                requests        -> check for requests/connection
                reading         -> actual value for reading headers
                writing         -> value for active requests
                waiting         -> actual keep-alive-connections
                checktime       -> checks if this check need more than
                                   given -w/-c milliseconds 
                
          --warning|-w)
            Sets a warning level for selected test(check)
            Default: off
          
          --critical|-c)
            Sets a critical level for selected test(check)
            Default: off
            
          --debug|-d)
            turn on debugging - messages (use this for manual testing, 
            never via nagios-checks; beware of the messy output
            Default: off 
            
          --version|-v)
            display version and exit
        
        *** ) -> please dont use this option, not implemented or not functional

    Examples:
            just get perfdata, url is default (/nginx_status)
            ./check_nginx_status -H www.example.com 
            
            check for plugin_checktime, error > 10ms (warning) or 50ms (error)
            ./check_nginx_status -H www.example.com -u /status  -w 10 -c 50
            
            check for active connections, alert on > 500/2000 active connections
            ./check_nginx_status -H www.example.com -u /status -t active_conn -w 500 -c 2000

            Check for accepts_errors:
            ./check_nginx_status -H www.example.com -t accepts_err -w 1 -c 50
    
    Performancedata:
    
        NginxStatus.Check OK | ac=1;acc=64; han=64; req=64; err=0; rpc=1; read=0; writ=1; wait=0; ct=6ms;

            ac      -> active connections
            acc     -> totally accepted connections
            han     -> totally handled connections
            req     -> total requests
            rpc     -> requests per connection (req/han) 
            err     -> diff between acc - han, thus errors
            read    -> reading requests from clients
            writ    -> reading request body, processes request, or writes response to a client
            wait    -> keep-alive connections, actually it is ac - (read + writ)
            ct      -> checktime (connection time) for this check
    
    Nginx-Config
            be sure to have your nginx compiled with Status-Module
            (--with-http_stub_status_module), you might want to test with
            nginx -V             
            http://wiki.nginx.org/HttpStubStatusModule

        location /nginx_status {
            stub_status on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }
    
    Docs & Download:

            https://bitbucket.org/maresystem/dogtown-nagios-plugins
    
            """

def ver():
    print """
check_nginx_status
    version : %s
    
    usage   : check_nginx_status -h
    
    """ % version

def print_debug(dtext):
    if debug == 1:
        print "[d] %s" % dtext
    return(0)



#### main

exot = 0
ssl = 0
debug = 0
test = 0
w = c = 0
user = passwd = 0
msg = "CheckNginx - UNKNOWN"
perfdata = ""


try:
    iv = sys.argv[1]
except:
    print """
    
usage: check_nginx_status -h

-----------------------------------------------------"""
    usage()
    sys.exit(3)
    

try:
    options,args = getopt.getopt(sys.argv[1:],"dvDshH:p:u:p:w:c:t:",["help","SSL","Debug","HOST=","Port=","Auth=","Test=","Url=","passwd=","warning=","critical="])

except getopt.GetoptError:
    usage()
    sys.exit(3)



# dont change 

for name,value in options:

    if name in ("-H","--HOST"):
        host = "%s" % value
    elif name in ("-u","--Url"):
        url = value
    elif name in ("-a","--Auth"):
        user, passwd = value.split(":")
    elif name in ("-s","--SSL"):
        ssl = 1
    elif name in ("-t","--Test"):
        test = "%s" % value 
    elif name in ("-d","--Debug"):
        debug = 1
    elif name in ("-p","--Port"):
        try:
            port = int(value)
        except:
            print("""%s Usage.ERROR - -p [PORT] must be an Integer """ % msg)    
            exot = 3

    elif name in ("-w","--warning"):
        try:
            w = int(value)
        except:
            print("""%s Usage.ERROR -w [WARNING] must be an Integer    """ % msg)
            exot = 3

    elif name in ("-c","--critical"):
        try:
            c = int(value)
        except:
            print("""%s Usage.ERROR -c [CRITICAL] must be an Integer    """ % msg)
            exot = 3

    elif name in ("-v","--version"):
        ver()
        sys.exit(0)
    
    else:
        usage()
        ver()
        sys.exit(0)

if exot != 0:
    sys.exit(exot)

# creating test-url

if host.find("http") > -1:
    print("""%s Usage.ERROR - use -H [hostname], NOT -H [http://hostname] (%s)""" (msg, host))
    sys.exit(3)

if ssl == 1:
    turl = "https://%s" % host
    print_debug("setting HTTP**S**")
else:
    turl = "http://%s" % host
    print_debug("setting HTTP")


if port != 80:
    turl = "%s:%s" % (turl, port)
    print_debug("setting Port: %s" % port)

curl = "%s%s" % (turl, url)
print_debug("final url to fetch: %s" % curl)



st = time.time()
req = urllib2.Request(curl)
#~ if 'user' in dir() and 'passwd' in dir():
    #~ passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
    #~ passman.add_password(None, curl, user, passwd)
    #~ authhandler = urllib2.HTTPBasicAuthHandler(passman)
    #~ opener = urllib2.build_opener(authhandler)
    #~ urllib2.install_opener(opener)


try:

    response = urllib2.urlopen(req)
    status = response.readlines()
    print_debug("returned_status from url: \n    %s" % "    ".join(status))
    response.close()


# TODO: http://stackoverflow.com/questions/2712524/handling-urllib2s-timeout-python
except Exception:
   print "%s: Error while getting Connection :: %s " % (msg, curl)
   sys.exit(3)

if len(status) == 0:
   print "%s: No values found in %s " % (msg , curl)
   sys.exit(3)
    

try:
    et = time.time()
    ct = int((et - st)*1000)
    l1 = status[0]
    ac = int(l1.split(":")[1].strip())
    l2 = status[2]
    acc, han, req = l2.split()
    acc = int(acc)
    han = int(han)
    req = int(req)
    err = acc - han
    rpc = int(req/han)
    l3 = status[3]
    read = int((l3.split("Reading:")[1]).split()[0])
    writ = int((l3.split("Writing:")[1]).split()[0])
    wait = int((l3.split("Waiting:")[1]).split()[0])

except:
   print "%s: Error while trying to convert values from status_url %s " % (msg , curl)
   for line in status:
       print "  :: %s" % line.strip()
   sys.exit(3)

    
print_debug("""-- status-report (perfdata)---

active_conns    :   %s
accepted conns  :   %s    
handled         :   %s
requests        :   %s
accept_errors   :   %s
req per conn    : %s
reading         :   %s
writing         :   %s
waiting         :   %s

checktime       :   %s ms

""" % (ac, acc, han, req, err, rpc, read, writ, wait, ct  )) 

perfdata = "ac=%s;acc=%s; han=%s; req=%s; err=%s; rpc=%s; read=%s; writ=%s; wait=%s; ct=%sms;"   % (ac, acc, han, req, err, rpc, read, writ, wait, ct  ) 

print_debug("perfdata: %s" % perfdata)


if test == 0:
    if w == 0 or c == 0:
        pass
    else:
        test = "checktime"

if test != 0:
    if w == 0:
        print("""Usage.ERROR :: -w [WARNING] must be set and Integer (cannot be 0)""")
        sys.exit(3)
    
    if c == 0:
        print("""Usage.ERROR :: -c [CRITICAL] must be set and Integer (cannot be 0)""")
        sys.exit(3)
        
# default test_text
tt = "unknown"

# checking which test to perform
if test == 0:
    tt = "Check"
elif test == "active_conn":
    ta = ac
    tt = "ActiveConnections"
elif test == "accepts_err":
    ta = err
    tt = "AcceptErrors"

elif test == "requests":
    ta = req
    tt = "Requests/Connection"


elif test == "reading":
    ta = read
    tt = "Reading"

elif test == "writing":
    ta = writ
    tt = "Writing"

elif test == "waiting":
    ta = wait
    tt = "Waiting"

else:
    ta = ct
    tt = "CheckTime"
    
print_debug("set test: %s" % tt)

dt = "NginxStatus.%s" % tt

if test == 0:
    print "%s OK | %s" % (dt, perfdata)
    sys.exit(0)

if ta >= c:
    print "%s CRITICAL: %s | %s" % (dt, ta, perfdata)
    sys.exit(2)
    
elif ta >= w:
    print "%s WARNING: %s | %s" % (dt, ta, perfdata)
    sys.exit(1)

else:
    print "%s OK | %s" % (dt, perfdata)
    


