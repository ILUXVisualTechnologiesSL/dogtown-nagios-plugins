#!/bin/sh
#
# check_snort   - nagios_plugin to check snort-host or
#                 snort-alert_count against
#                 given averages (need snort_db-database)
#
# v0.2.14 - ALPHA - 2010-07-10
# 
# next version will be reimplemented in python
#
#
#  Copyright (C) 2008,2009,2010  mare-system.de
#                                dogtown@mare-system.de
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; version 2
#  of the License.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#  http://www.gnu.org/licenses/gpl-2.0.html
#


#
# VARS 
#



# DB
SNORT_DB="snort"
SNORT_DB_HOST="localhost"
SNORT_DB_PORT="3306"
SNORT_DB_USER="snortuser"
SNORT_DB_PASS="snortpass"


# DEFAULT_VARS
SPOOL_DATA_DIR="/var/log/nagios"
DEBUG="no"                           # no debug on default
LOG_FILE="$SPOOL_DATA_DIR/check_snort.`date +%a`.log"
HOSTNAME=`hostname -f`


# -m alerts defaults
INTERVAL="2"
WARNING_THRESH="500"                 # warning_threshold in %
CRITICAL_THRESH="1000"               # critical_threshold in %
PRIORITY_LEVEL="3"                   # prio-level to check against

#
# -m host defaults
#
SNORT_SYSLOG="/var/log/syslog"
DROPPED_WARNING="5"                  # dropped packets warning_threshold in %
DROPPED_CRITICAL="10"                # dropped packets critical_threshold in %

####################################################
#
# functions
#
NOW_DATE=`date +%F-%H:%M`
EXIT_STATUS="UNKNOWN"
EXIT_TEXT="$HOSTNAME unknown status $NOW_DATE"
EXIT_VALUE="3"
DEBUG_DEFAULT_OPT=" 2>&1 > /dev/null"


trap exit_now EXIT 
trap exit_now SIGCHLD




function check_snort_help {

    echo "

check_snort.sh 
            - nagios_plugin to check snort_hosts or 
              snort_alerts in snort_databases
              and alert on given thresholds; 
              to be used @ snort_db_hosts via check_nrpe
              see check_snort.README for more details
              
  [nyr]  ->  use with caution: function not yet ready implemented and tested 

  USAGE:
    check_snort.sh [options] 

  CONFIG:
    values for db_acces, defaults etc might be configured 
    within this file -> $0
    
  OPTIONS
    this script uses 2 modes: 
    -m [modus]    set the working-modus
                  MODI: 
                    host   - check snort_host specific details (running, dropped packages)
                             [nyr]
                    alerts - check snort_alerts against a given database (only mysql supported
                             at the moment 

    -c [percent]  set critical_threshold in % ; if actual_alert
                  is [percent] higher then avg_alert returns CRITICAL 
                  if the alertcount is [percent] lower, an
                  anormal_report is generated and displayed
                  default: 500
                  
    -w [percent]  set warning_threshold in % ; if actual_alert
                  is [percent] higher then avg_alert warning is displayed
                  if the alertcount is [percent] lower, an
                  anormal_report is generated and displayed
                  default: 1000
                  
    -i [INTERVAL] set check_interval (actual_alert vs avg_alert:
                  1 -> 5min vs 60min
                  2 -> 1hour vs 24hour (default)
                  3 -> 24hour vs 7day
                  4 -> 7 day vs 30 day (DO NOT USE)
                  5 -> 7 day vs 90 day (DO NOT USE)
                  6 -> display total number (no warning/critical) [nyr]
                  
    -p [PRIORITY] set the snort_sig_priority_level to check against;
                  default: 3
    
    -s [sid]      set a special sid to check instead of priority
                  [nyr]
                  
    
    -d            debuG_output > logfile
                  
    -l [logfile]  alternate log_file
                  default: SPOOL_DATA_DIR/check_snort.log
                  
    
    -o [out_dir]  give a separate spool_data_dir 
                  default: /var/log/nagios
                  may be changed within the script itself via default_VAR
    
    -z            create cvs_output in SPOOL_DATA_DIR [nyr]
  
  
  EXAMPLE
   check_snort.sh -m alerts -i 3 -w 100 -c 200 
   
   
"    
    
}


function get_last_count {



    now=`date +%s`
    time_diff_x=$(( now - ACTUAL_ALERTS ))
    time_diff=`stamp2date $time_diff_x`
    #echo "dttt: $before_24_date"
    mysql_exec_last="select count(sid) from event,signature where event.signature=signature.sig_id and signature.sig_priority > '$((PRIORITY_LEVEL-1))' and timestamp(event.timestamp) > '$time_diff';"
    print_debug "get_last  -> mysql -h $SNORT_DB_HOST -P $SNORT_DB_PORT -u $SNORT_DB_USER --password=$SNORT_DB_PASS -e \"$mysql_exec_last\" $SNORT_DB "    
    
    COUNT_LAST=`mysql --skip-column-names -h $SNORT_DB_HOST -P $SNORT_DB_PORT -u $SNORT_DB_USER --password=$SNORT_DB_PASS -e "$mysql_exec_last" $SNORT_DB`
    if [ ! "$COUNT_LAST" ]; then
        COUNT_LAST="1"
    elif [ "$COUNT_LAST" = "0" ]; then
        COUNT_LAST="1"
    fi
    
    print_debug "time_diff -> $time_diff / COUNT_LAST: -> $COUNT_LAST"

    
}

function get_avg_count {

    now=`date +%s`
    time_diff=$(( now - AVERAGE_ALERTS  ))
    time_diff=`stamp2date $time_diff`
    mysql_exec_avg="select count(sid) from event,signature where event.signature=signature.sig_id and signature.sig_priority > '$((PRIORITY_LEVEL-1))' and timestamp(event.timestamp) > '$time_diff';"
    #print_debug "get_avg -> mysql -h $SNORT_DB_HOST -P $SNORT_DB_PORT -u $SNORT_DB_USER --password=$SNORT_DB_PASS -e \"$mysql_exec_avg\" $SNORT_DB " 
    
    COUNT_AVG=`mysql --skip-column-names -h $SNORT_DB_HOST -P $SNORT_DB_PORT -u $SNORT_DB_USER --password=$SNORT_DB_PASS -e "$mysql_exec_avg" $SNORT_DB `
    if [ ! "$COUNT_AVG" ]; then
        COUNT_AVG="1"
    elif [ "$COUNT_AVG" = "0" ]; then
        COUNT_AVG="1"
    fi
    
    print_debug "time_diff -> $time_diff / COUNT_AVG: -> $COUNT_AVG"

    
    
}

function get_latest_values {
    if [ ! -f "$values_log_file" ]; then
        EXIT_STATUS="WARNING"
        EXIT_VALUE="2"
        EXIT_TEXT="check_file not found -> $values_log_file (trying to create) "
        print_debug "check_file not found -> $values_log_file (trying to create) "
        touch $values_log_file
        exit_now
    fi
    print_debug "reading $values_log_file"
    last_total=`cat $values_log_file | head -n 1`
    last_status=`cat $values_log_file | head -n 1 | awk -F ":" '{ print $1 }' | tr -d " "`
    last_last=`cat $values_log_file | head -n 1 | awk -F ":" '{ print $2 }' | tr -d " "`
    last_avg=`cat $values_log_file | head -n 1 | awk -F ":" '{ print $3 }' | tr -d " "`
    last_date=`cat $values_log_file | head -n 1 | awk -F ":" '{ print $3 }' | tr -d " "`
    
    if [ "$last_status" = "SUPERCRITICAL" ]; then
        EXIT_STATUS="CRITICAL"
        EXIT_VALUE="2"
        EXIT_TEXT="critical status found > $values_log_file -> $last_total  "
        exit_now
    
    fi
    print_debug " > last_status -> $last_status / last_last -> $last_last / last_avg -> $last_avg / last_date -> $last_date --> $values_log_file" 
    #exit
}

function write_latest_values {
    check_exit_status="$EXIT_STATUS"
    if [ ! -f "$values_log_file" ]; then
        touch $values_log_file
    fi
    echo "$check_exit_status : $COUNT_LAST : $AVG_AVG : $NOW_DATE" > $values_log_file
    print_debug "$EXIT_STATUS : $COUNT_LAST : $AVG_AVG values_log_file -> $values_log_file" 
    
}

function stamp2date {
    date --date "1970-01-01 $1 sec" "+%Y-%m-%d %T"
}

function print_debug {
    if [ "$DEBUG" = "yes" ]; then
        print_log "$1"    
    fi

}


function print_log {
    log_insert="$NOW_DATE  -  [ $MODUS ] - $1"
    echo "$1" >> $LOG_FILE   
}

function exit_now {
    if [ "$EXIT_PERF_DATA" ]; then
        EXIT_PERF_DATA=" | $EXIT_PERF_DATA"
    fi
    
    echo "SNORT_CHECK $EXIT_STATUS - [$MODUS] $EXIT_TEXT $EXIT_PERF_DATA"
    exit "$EXIT_VALUE"
    
}


function check_host {
    
    snort_pid=`pidof snort`
    if [ ! "$snort_pid" ]; then    
        EXIT_TEXT="$EXIT_TEXT ::  no pid for snort found _pidof snort_  (sorry)"
        exit
    fi
    snort_stats=`sudo kill -s SIGUSR1 $snort_pid && sudo tail -n 200 $SNORT_SYSLOG | grep  "snort" | awk -F "]:" '{ print $2 }'`
    
    
    for line in $snort_stats
        do
            if echo $line | grep "Packet Wire Totals" ; then
                start_stats="1"
            else
                I=1
            fi 
            
            if [ "$start_stats" = "1" ]; then 
                if echo $line | grep "Received" ; then
                    echo "$received"
                    received_pckt=`echo $line | awk -F ":" '{ print $2 }' | tr -d " "`
                elif echo $line | grep "Analyzed" ; then
                    analyzed_pckt=`echo $line | awk -F ":" '{ print $2 }' | awk -F " " '{ print $1 }' | tr -d " "`
                elif echo $line | grep "Dropped" ; then
                    dropped_pckt=`echo $line | awk -F ":" '{ print $2 }' | awk -F " " '{ print $1 }' | tr -d " "`
                elif echo $line | grep "Outstanding" ; then
                    outstanding_pckt=`echo $line | awk -F ":" '{ print $2 }' | awk -F " " '{ print $1 }' | tr -d " "`
                    break
                fi
            
            fi
        done
        
        dropped_perc=$(( 100 / received_pckts * dropped_pckt ))

        EXIT_PERF_DATA=" dropped_perc=$dropped_perc;$DROPPED_WARNING;$DROPPED_CRITICAL; dropped_total=$dropped_pckt"



    if [ $dropped_perc -gt $DROPPED_CRITICAL ]; then
        EXIT_STATUS="CRITICAL"
        EXIT_VALUE="2"
    elif [ $dropped_perc -gt $DROPPED_WARNING ]; then
        EXIT_STATUS="WARNING"
        EXIT_VALUE="1"
    else
        EXIT_STATUS="OK"
        EXIT_VALUE="0"

    fi

    EXIT_TEXT="snort-stats total received: $received_pckt, dropped: $dropped_pckt / $dropped_perc % :: warning: $DROPPED_WARNING, :: critical: $DROPPED_CRITICAL "

    write_latest_values

    #print_debug "exit_status -> $EXIT_VALUE : $EXIT_STATUS  -> $EXIT_TEXT  :perfdata: $EXIT_PERF_DATA"
    print_log "$NOW_DATE :: $EXIT_STATUS  :: $EXIT_TEXT  :perfdata: $EXIT_PERF_DATA :: file: $values_log_file" 

    
    exit
    
}

function check_alerts {
    # getting time_intervals from INTERVAL

    if [ "$INTERVAL" = "1" ]; then 
        AVERAGE_ALERTS="3600"
        ACTUAL_ALERTS="300"
        DIVIDER="12"
        COUNT_INTERVAL="5min-1hr"

    elif [ "$INTERVAL" = "2" ]; then 
        AVERAGE_ALERTS="86400"
        ACTUAL_ALERTS="3600"
        DIVIDER="24"
        COUNT_INTERVAL="1hr-24hr"


    elif [ "$INTERVAL" = "3" ]; then 
        AVERAGE_ALERTS="604800"
        ACTUAL_ALERTS="86400"
        DIVIDER="7"
        COUNT_INTERVAL="24hr-7d"
        
    elif [ "$INTERVAL" = "4" ]; then 
        AVERAGE_ALERTS="2592000"
        ACTUAL_ALERTS="604800"
        COUNT_INTERVAL="7d-30d"
        DIVIDER="4"
        
    elif [ "$INTERVAL" = "5" ]; then 
        AVERAGE_ALERTS="7776000"
        ACTUAL_ALERTS="604800"
        DIVIDER="13"
        COUNT_INTERVAL="7d-90d"

    else 
        AVERAGE_ALERTS="86400"
        ACTUAL_ALERTS="3600"
        COUNT_INTERVAL="1hr-24hr"
        DIVIDER="24"
        
    fi

    print_debug "
    ----[ $NOW_DATE ]-----------------------------------------------

    "
    LAST_TAG=`echo $COUNT_INTERVAL | awk -F "-" '{ print $1 }'`
    AVG_TAG=`echo $COUNT_INTERVAL | awk -F "-" '{ print $2 }'`

    values_log_file="$SPOOL_DATA_DIR/$PRIORITY_LEVEL-$COUNT_INTERVAL.check"


    get_latest_values
    get_last_count
    get_avg_count

    # bashematics is not foofun for me ...
    AVG_AVG=$(( COUNT_AVG / DIVIDER ))
    if [ "$AVG_AVG" = "0" ]; then
        AVG_AVG="1"
    fi

    w_limit=$(( AVG_AVG + (AVG_AVG * WARNING_THRESH  / 100)  ))
    c_limit=$(( AVG_AVG + (AVG_AVG * CRITICAL_THRESH / 100)  ))

    print_debug "check_options: AVG -> $AVERAGE_ALERTS / ACT -> $ACTUAL_ALERTS / INT -> $COUNT_INTERVAL / DIV -> $DIVIDER"

    print_debug "

    PRIORITY  -> $PRIORITY_LEVEL
    INTERVAL  -> $COUNT_INTERVAL
    LAST      -> $COUNT_LAST
    AVG       -> $COUNT_AVG
    AVG_AVG   -> $AVG_AVG
    w_limit   -> $w_limit
    c_limit   -> $c_limit
    "

    #~ w_limit   -> $w_limit
    #~ c_limit   -> $c_limit
    #~ 

    EXIT_PERF_DATA="$LAST_TAG=$COUNT_LAST;$w_limit;$c_limit; $AVG_TAG=$COUNT_AVG; $AVG_TAG-avg=$AVG_AVG"



    if [ $COUNT_LAST -gt $c_limit ]; then
        EXIT_STATUS="CRITICAL"
        EXIT_VALUE="2"
    elif [ $COUNT_LAST -gt  $w_limit ]; then
        EXIT_STATUS="WARNING"
        EXIT_VALUE="1"
    else
        EXIT_STATUS="OK"
        EXIT_VALUE="0"

    fi

    EXIT_TEXT="p-$PRIORITY_LEVEL :: $COUNT_INTERVAL :: last: $COUNT_LAST - avg: $AVG_AVG / thresh: $w_limit/$c_limit [$WARNING_THRESH%/$CRITICAL_THRESH%]"

    write_latest_values

    #print_debug "exit_status -> $EXIT_VALUE : $EXIT_STATUS  -> $EXIT_TEXT  :perfdata: $EXIT_PERF_DATA"
    print_log "$NOW_DATE :: $EXIT_STATUS  :: $EXIT_TEXT  :perfdata: $EXIT_PERF_DATA :: file: $values_log_file" 
    
}


####################################################
#
# program
#

if  [ ! "$1" ]; then
    check_snort_help
    exit
fi

while getopts dhw:c:i:p:l:s:m: opt
do


    case $opt in
        i) 
            INTERVAL="$OPTARG"
        ;;
        
        c)
            CRITICAL_THRESH="$OPTARG"
            DROPPED_CRITICAL="$OPTARG"
        ;;
        
        w)
            WARNING_THRESH="$OPTARG"
            DROPPED_WARNING="$OPTARG"
        ;;
        
        p)
            PRIORITY_LEVEL="$OPTARG"
        ;;
        
        s)
            SID="$OPTARG"
        ;;
        
        d)
        DEBUG="yes"
        ;;
        m)
        
        MODUS="$OPTARG"
        ;;
        
        l)
        LOG_FILE="$OPTARG"
        ;;
        
        o)
        SPOOL_DATA_DIR="$OPTARG"
        ;;

        h)
        check_snort_help
        exit 
        ;;
        *)
        check_snort_help
        exit
        ;;
    esac
    

    
done

shift $((OPTIND - 1))

if [ ! -d "$SPOOL_DATA_DIR" ]; then
    echo "
> error no output_dir given/created; run 
> \$ mkdir -p $SPOOL_DATA_DIR && chown nagios:nagios $SPOOL_DATA_DIR
> to create that dir

"
    EXIT_TEXT="$EXIT_TEXT ::  SPOOL_DATA_DIR not found -> $SPOOL_DATA_DIR"
    exit
    
fi


    
if [ "$MODUS" = "host" ]; then
    check_host

elif [ "$MODUS" = "alerts" ]; then
    check_alerts

else
    EXIT_TEXT="$EXIT_TEXT ::  no modus selected (use -m switch) -> help: check_snort.sh -h "
    exit

fi

exit




